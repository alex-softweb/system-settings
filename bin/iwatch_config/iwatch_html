#! /usr/bin/ruby

# Usage:
# $ gem install listen -v 2.10.0
#
# src_dir/
#   coffee/
#   js/
#   sass/
#   css/
#   index.haml
#   index.html
#
# $ iwatch src_dir
# OR
# $ iwatch src_dir/coffee

require 'listen'
@src_folder = ARGV[0]

@dictionary = {
  'haml' => 'html',
  'coffee' => 'js',
  'sass' => 'css'
}

@colors = {
  reset: "\033[0m",
  fg_red: "\033[31m",
  fg_cyan: "\033[36m",
  fg_white: "\033[37m",
  bg_black: "\033[40m"
}

def get_destination(path)
  filetype = File.extname(path).slice(/\w+/)
  fail SyntaxError, "avoiding #{ @colors[:fg_white] + path + @colors[:reset] }" unless @dictionary[filetype]
  dest_filetype = @dictionary[filetype]
  dtn_path = path.gsub(/[^\/]+\/(\w+)\.\w+$/, "#{ dest_filetype }/#{ $1 }.#{ dest_filetype }")
  { filetype: filetype, path: dtn_path }
end

def command_for(filetype, src_path, dtn_path)
  case filetype
  when 'haml'
    "haml #{ src_path } #{ dtn_path }"
  when 'sass'
    "sass #{ src_path } #{ dtn_path }"
  when 'coffee'
    # remove file name from path due to Coffee's requirement of dir for output
    dtn_path = File.expand_path('../', dtn_path)
    "coffee -o #{ dtn_path } -c #{ src_path }"
  end
end

def show_time
  print @colors[:fg_white] + @colors[:bg_black] + Time.now.strftime("%H:%M:%S") + @colors[:reset] + " => "
end

def compile(src_path)
  destination = get_destination(src_path)

  if system command_for(destination[:filetype], src_path, destination[:path])
    show_time
    puts "compiled #{ @colors[:fg_cyan] + File.basename(src_path) + @colors[:reset] } successfully"
  end
end

callback = Proc.new do |updated, added, removed|
  begin
    (updated + added).each do |path|
      compile(path)
    end

    removed.each do |path|
      destination = get_destination(path)

      if system "rm #{ destination[:path] }"
        show_time
        puts "deleted  #{ @colors[:fg_red] + File.basename(destination[:path]) + @colors[:reset] }"
      end
    end

  rescue SyntaxError => e
    show_time
    puts e.message
    Dir.glob("#{ @src_folder }/*.haml").each { |path| compile(path.slice(/[^\/][\w|\.]+?$/)) }
  end
end

Listen.to(@src_folder, &callback).start
sleep
