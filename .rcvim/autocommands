" vim: set ft=vim:

fun! CoffeeMaker()
  set filetype=coffee
endf

function! s:SetupDiffWindow()
  if &diff
    set foldcolumn=0
    set wrap
  endif
endfunction

function! s:SetupSpacing()
  set tabstop=2
  set softtabstop=2
  set shiftwidth=2
endfunction

function! s:AddRequireLineInTest()
  if &ft == 'rspec'
    call setline('.', "require 'spec_helper'")
  elseif &ft == 'minitest'
    call setline('.', "require 'test_helper'")
  endif
endfunction

function! s:AddDefaultCppDirectives()
  call setline(1, '#include <iostream>')
  call setline(2, 'using namespace std;')
endfunction

function! s:AddDefaultCDirectives()
  call setline(1, '#include <stdio.h>')
endfunction

augroup nonRepeater
 au!
 au BufRead,BufNewFile *.coffee.erb call CoffeeMaker()
 au BufRead,BufNewFile *.jst.ejs set filetype=html
 au BufRead,BufNewFile *.conf set filetype=conf
 au BufRead,BufNewFile *.md set filetype=markdown
 au BufRead,BufNewFile *.pdf.txt set filetype=pdf_txt
 au BufRead,BufNewFile *.pdf.txt set syntax=notes
 au BufRead,BufNewFile *.sbt set filetype=scala

 au BufNewFile *.rb call s:AddRequireLineInTest()
 au BufNewFile *.cpp call <SID>AddDefaultCppDirectives()
 au BufNewFile *.c call <SID>AddDefaultCDirectives()

 au FileType qf nmap <buffer> <CR> :.cc<CR>
 au CmdwinEnter * nnoremap <buffer> <CR> <CR>
 au FilterWritePre * call s:SetupDiffWindow()
 au FileType notes call s:SetupSpacing()

 au FileType elixir let b:run_live_command = 'elixir'
 au FileType ruby let b:run_live_command = 'ruby'
 au FileType scala let b:run_live_command = 'scala'
augroup END
